

import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.InputMismatchException;

/*
 * https://www.spoj.com/problems/RMQSQ/
 * Reference: https://www.youtube.com/watch?v=JJ_f2mTkcfY&list=PL2q4fbVm1Ik6v2-emg_JGcC9v2v2YTbvq&si=3
 * 
 */

public class SegmentTreeRMQ {

	static int a[];
	static int st[];
	static int INF = (int) 1e9;

	public static void main(String args[]) {

		InputReader in = new InputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);

		int n = in.nextInt();
		a = new int[n + 1];
		for (int i = 1; i <= n; i++)
			a[i] = in.nextInt();

		st = new int[4 * n + 1];

		int q = in.nextInt();

		build(1, 1, n);

		while (q-- != 0) {

			int type = in.nextInt();
			if (type == 1) {
				int l = in.nextInt();
				int r = in.nextInt();
				System.out.println(query(1, 1, n, l + 1, r + 1));
			} else {
				int qi = in.nextInt();
				int val = in.nextInt();
				a[qi + 1] = val;
				update(1, 1, n, qi + 1);
			}

		}

		out.close();

	}

	public static int query(int si, int ss, int se, int qs, int qe) {

		if (ss > qe || se < qs)
			return INF;
		if (ss >= qs && se <= qe)
			return st[si];

		int mid = (ss + se) / 2;
		int l = query(2 * si, ss, mid, qs, qe);
		int r = query(2 * si + 1, mid + 1, se, qs, qe);

		return Math.min(l, r);

	}

	public static void update(int si, int ss, int se, int qi) {

		if (ss == se) {
			st[si] = a[qi];
			return;
		}

		int mid = (ss + se) / 2;
		if (qi <= mid)
			update(2 * si, ss, mid, qi);
		else
			update(2 * si + 1, mid + 1, se, qi);

		st[si] = Math.min(st[2 * si], st[2 * si + 1]);

	}

	public static void build(int si, int ss, int se) {

		if (ss == se) {
			st[si] = a[ss];
			return;
		}

		int mid = (ss + se) / 2;

		build(2 * si, ss, mid);
		build(2 * si + 1, mid + 1, se);

		st[si] = Math.min(st[2 * si], st[2 * si + 1]);
	}

	
	
	
	
	static class InputReader {

		private final InputStream stream;
		private final byte[] buf = new byte[8192];
		private int curChar, snumChars;
		private SpaceCharFilter filter;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		public int snext() {
			if (snumChars == -1)
				throw new InputMismatchException();
			if (curChar >= snumChars) {
				curChar = 0;
				try {
					snumChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (snumChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public int nextInt() {
			int c = snext();
			while (isSpaceChar(c)) {
				c = snext();
			}
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = snext();
			}
			int res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public long nextLong() {
			int c = snext();
			while (isSpaceChar(c)) {
				c = snext();
			}
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = snext();
			}
			long res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public int[] nextIntArray(int n) {
			int a[] = new int[n];
			for (int i = 0; i < n; i++) {
				a[i] = nextInt();
			}
			return a;
		}

		public String readString() {
			int c = snext();
			while (isSpaceChar(c)) {
				c = snext();
			}
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = snext();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public String nextLine() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = snext();
			} while (!isEndOfLine(c));
			return res.toString();
		}

		public boolean isSpaceChar(int c) {
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		private boolean isEndOfLine(int c) {
			return c == '\n' || c == '\r' || c == -1;
		}

		public interface SpaceCharFilter {
			public boolean isSpaceChar(int ch);
		}
	}

}
